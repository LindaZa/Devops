pipeline {
    agent any

    environment {
        SONAR_HOST_URL = 'http://10.0.2.15:9000/'
        SONAR_LOGIN = credentials('sonar')  // Clé d'authentification SonarQube
        NEXUS_HOST_URL = 'http://10.0.2.15:9001/'
        DOCKER_CREDENTIALS = credentials('dockercredentials')
    }

    stages {
        stage('Checkout from Git') {
            steps {
                echo 'Récupération du code depuis Git'
                git branch: 'ahedgossa_Devops', url: 'https://github.com/LindaZa/Devops'
            }
        }

        stage('Maven Clean and Test') {
            steps {
                echo 'Exécution de Maven Clean et Test'
                sh 'mvn clean verify'  // Exécution de verify pour s'assurer que la phase post-test est incluse
            }
        }

        // Stage "Run Tests" explicite, pour s'assurer que les tests sont exécutés
        stage('Run Tests') {
            steps {
                echo 'Exécution des tests unitaires...'
                sh 'mvn test'  // Exécution des tests unitaires avec JaCoCo pour collecter les informations de couverture
            }
        }

        stage('Verify JaCoCo Report') {
            steps {
                echo 'Vérification de la présence du fichier de rapport JaCoCo'
                script {
                    // Liste tous les fichiers dans target/ pour diagnostiquer
                    sh 'echo "Contenu de target/" && ls -l target/'

                    // Liste les fichiers dans target/site/jacoco/ où le rapport devrait être généré
                    sh 'echo "Contenu de target/site/jacoco/" && ls -l target/site/jacoco/ || echo "Le répertoire target/site/jacoco/ n\'existe pas"'

                    // Vérification de la présence du fichier jacoco.exec
                    sh 'echo "Vérification de la présence du fichier jacoco.exec" && ls -l target/jacoco.exec || echo "Le fichier jacoco.exec n\'existe pas"'

                    // Vérification de la présence du fichier jacoco.xml
                    sh 'echo "Vérification de la présence de jacoco.xml" && ls -l target/site/jacoco/jacoco.xml || echo "Le fichier jacoco.xml n\'existe pas"'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Exécution de l\'analyse SonarQube'
                withSonarQubeEnv('SonarQube-Server') {
                    sh '''
                        mvn sonar:sonar \
                        -Dsonar.projectKey=ahed \
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.login=$SONAR_LOGIN \
                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                    '''
                }
            }
        }

        // Déploiement sur Nexus
        stage('Deploy to Nexus') {
            steps {
                echo 'Déploiement vers Nexus...'
                withCredentials([usernamePassword(credentialsId: 'nexuscredentials', passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
                    sh '''
                        mvn deploy -DskipTests \
                        -DaltDeploymentRepository=MavenRepository::default::${NEXUS_HOST_URL}/repository/MavenRepository/ \
                        -Dusername=${NEXUS_USERNAME} \
                        -Dpassword=${NEXUS_PASSWORD}
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Construction de l\'image Docker...'
                script {
                    sh 'docker build -t ahedgossa2024/devops .'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo 'Poussée de l\'image Docker vers Docker Hub...'
                withCredentials([usernamePassword(credentialsId: 'dockercredentials', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                    script {
                        sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}"
                        sh "docker push ahedgossa2024/devops"
                    }
                }
            }
        }

        stage('Docker Compose') {
            steps {
                echo 'Exécution de Docker Compose'
                script {
                    sh 'docker compose pull'
                    sh 'docker compose down'
                    sh 'docker compose up -d'
                }
            }
        }
    }
}

       

              
                   
           


      
        
 
