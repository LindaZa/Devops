pipeline {
    agent any

    environment {
        SONAR_HOST_URL = 'http://10.0.2.15:9000/'  // L'URL de ton serveur SonarQube
        SONAR_LOGIN = credentials('sonar')  // Clé d'authentification SonarQube
        NEXUS_HOST_URL = 'http://10.0.2.15:9001/'  // URL de ton serveur Nexus
        DOCKER_CREDENTIALS = credentials('dockercredentials')
    }

    stages {
        stage('Checkout from Git') {
            steps {
                echo 'Récupération depuis Git'
                git branch: 'ahedgossa_Devops', url: 'https://github.com/LindaZa/Devops'
            }
        }

        stage('Maven Clean') {
            steps {
                echo 'Running Maven Clean'
                sh 'mvn clean'
            }
        }

        stage('Maven Compile') {
            steps {
                echo 'Running Maven Compile'
                sh 'mvn compile'
            }
        }

        stage('Coverage Report') {
            steps {
                // Générer le rapport de couverture JaCoCo
                sh '/usr/share/maven/bin/mvn verify'
            }
        }

        // Stage pour l'analyse SonarQube
        stage('SonarQube Analysis') {
            steps {
                // echo 'Running SonarQube Analysis'
                withSonarQubeEnv('SonarQube-Server') { 
                    // Exécution de l'analyse SonarQube avec les paramètres requis
                    sh '''
                        mvn sonar:sonar \
                        -Dsonar.projectKey=ahed \  # Clé de ton projet dans SonarQube
                        -Dsonar.host.url=$SONAR_HOST_URL \
                        -Dsonar.login=$SONAR_LOGIN \
                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                    '''
                }
            }
        }

        stage('JUnit/Mockito Tests') {
            steps {
                echo 'Running JUnit/Mockito Tests'
                sh 'mvn test jacoco:report'
            }
        }

        stage('Deploy to Nexus') {
            steps {
                echo 'Deploying to Nexus...'
                withCredentials([usernamePassword(credentialsId: 'nexuscredentials', passwordVariable: 'NEXUS_PASSWORD', usernameVariable: 'NEXUS_USERNAME')]) {
                    sh '''
                        mvn deploy -DskipTests \
                        -DaltDeploymentRepository=MavenRepository::default::${NEXUS_HOST_URL}/repository/MavenRepository/ \
                        -Dusername=${NEXUS_USERNAME} \
                        -Dpassword=${NEXUS_PASSWORD}
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    sh 'docker build -t ahedgossa2024/dockerrepository:1.0.0 -f dockerfile .'
                }
            }
        }

        stage('Push DockerHub') {
            steps {
                echo 'Pushing Docker image...'
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockercredentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                        sh 'docker push ahedgossa2024/dockerrepository:1.0.0'
                    }
                }
            }
        }

        stage('Docker Compose') {
            steps {
                script {
                    sh 'docker compose pull'
                    sh 'docker compose down'
                    sh 'docker compose up -d'
                }
            }
        }
    }
}


      
        
 
